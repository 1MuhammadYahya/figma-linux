name: Build

on:
  create:
    tags:
    - 'v*.*.*'

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        id: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache src
        id: cache-src
        uses: actions/upload-artifact@v2
        with:
          name: repo
          path: ./*

  build_arm64v8:
    needs: setup
    name: build for arm64v8
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: repo
        path: ./

    - name: Setup
      run: |
        chmod +wr . -R
        chmod +x ./**/*.sh
        chmod +x ./**/*.pl

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build in Docker
      id: build
      run: |
        docker buildx build --platform linux/arm64 -t 4tqrgqe5yrgfd/figma-linux-artefacts-arm --load -f ./docker/Build_artefacts_arm64v8 .
        mkdir -p ./build/installers
        docker cp $(docker create 4tqrgqe5yrgfd/figma-linux-artefacts-arm)://usr/src/figma-linux/build/installers/. ./build/installers
        perl ./scripts/generate_release_notes.pl

    - name: Cache arm64v8 artifacts
      id: cache-arm64v8-artifacts
      uses: actions/upload-artifact@v2
      with:
        name: arm64v8
        path: build/installers/*

  release_arm64v8:
    name: Upload assets
    runs-on: ubuntu-latest
    needs: build_arm64v8
    steps:
      - name: mkdir installers
        run: mkdir -p ./build/installers

      - uses: actions/download-artifact@v2
        with:
          name: arm64v8
          path: ./build/installers

      - name: Get version
        id: version
        run: |
          echo ::set-output name=release::$(cat build/installers/version)
          sha256sum ./build/installers/figma-linux* || echo ""

      - name: Upload release assets
        id: release
        uses: ChugunovRoman/action-gh-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Figma Linux ${{ steps.version.outputs.release }}
          files: build/installers/figma-linux*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_amd64:
    runs-on: ubuntu-latest
    name: build for amd64
    needs: setup
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: repo
          path: ./

      - name: Setup
        run: |
          chmod +wr . -R
          chmod +x ./**/*.sh
          chmod +x ./**/*.pl

      - name: Build in Docker
        id: build
        run: |
          docker build -t figma-linux-artefacts -f "./docker/Build_artefacts_local" .
          mkdir -p ./build/installers
          docker cp $(docker create figma-linux-artefacts:latest)://usr/src/figma-linux/build/installers/. ./build/installers
          mv ./build/installers/figma-linux_$(cat build/installers/version)_linux_x64.zip ./build/installers/figma-linux_$(cat build/installers/version)_linux_amd64.zip
          perl ./scripts/generate_release_notes.pl

      - name: Cache amd64 artifacts
        id: cache-amd64-artifacts
        uses: actions/upload-artifact@v2
        with:
          name: amd64
          path: |
            ./release_notes
            build/installers/*

  release_amd64:
    name: Upload assets
    runs-on: ubuntu-latest
    needs: build_amd64
    steps:
      - name: mkdir installers
        run: mkdir -p ./build/installers

      - uses: actions/download-artifact@v2
        with:
          name: amd64
          path: ./build/installers

      - name: Get version
        id: version
        run: |
          echo ::set-output name=release::$(cat build/installers/version)
          sha256sum ./build/installers/figma-linux* || echo ""

      - name: Upload release assets
        id: release
        uses: ChugunovRoman/action-gh-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: ./release_notes
          name: Figma Linux ${{ steps.version.outputs.release }}
          files: build/installers/figma-linux*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload_ppa_amd64:
    name: Upload to Launchpad PPA
    runs-on: ubuntu-latest
    needs: build_amd64
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ./

      - name: Import keys
        run: |
          ls -la .
          mv ./repo/* ./
          mv ./amd64/* ./
          rm -rf ./repo
          rm -rf ./amd64
          ls -la .
          chmod +x ./**/*.sh
          chmod +x ./**/*.pl
          ls -la ./scripts
          ls -la ./build
          ls -la ./build/installers
          mkdir ./gpg
          echo "${{ secrets.GPG_PUB_KEY }}" | base64 -d > ./gpg/pub.key
          echo "${{ secrets.GPG_SECRET_KEY }}" | base64 -d > ./gpg/secret.key
          echo "${{ secrets.GPG_PASSPHRASE_KEY }}" | base64 -d > ./gpg/passphrase
          echo "${{ secrets.ID_RSA }}" | base64 -d > ./gpg/id_rsa

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Upload PPA
        run: |
          ./scripts/build_ppa.sh "1"

  upload_aur:
    name: Upload to AUR
    runs-on: ubuntu-latest
    needs: [build_amd64 build_arm64v8]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: [amd64 arm64v8]
          path: ./

      - name: Prepare artifacts
        run: |
          ls -la .
          rm -rf ./*.(deb,pacman,rpm,AppImage)
          rm -rf ./linux*
          ls -la .

      - name: Import SSH key
        id: key
        run: |
          echo "Importing SSH ley..."
          echo "${{ secrets.ID_RSA }}" | base64 -d > ~./.ssh/id_rsa
          echo "Updating ~/.ssh/known_hosts..."
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
          echo "Step completed"

      - name: Checkout AUR repo
        id: checkout
        run: git clone ssh://aur@aur.archlinux.org/figma-linux.git ./

      - name: Update PKGBUILD
        id: pkgbuild
        run: |
          prevVersion=$(cat ./PKGBUILD | grep -E 'pkgver=".*"' | tr -d '[a-z="\n]')
          version="$(cat ./version)"
          sha256sums_x86_64="$(sha256sum ./figma-linux_${version}_linux_amd64.zip)"
          sha256sums_aarch64="$(sha256sum ./figma-linux_${version}_linux_arm64.zip)"
          echo "Bump version from $prevVersion to $version"
          echo "New sha256sums for x86_64: ${sha256sums_x86_64}"
          echo "New sha256sums for aarch64: ${sha256sums_aarch64}"
          sed -i "s/$prevVersion/$version/" ./PKGBUILD
          sed -i "s/$prevVersion/$version/" ./.SRCINFO
          echo "Updating sums..."
          sed -i "s/sha256sums_x86_64 = .*\n/sha256sums_x86_64 = ${sha256sums_x86_64}\n/" ./.SRCINFO
          sed -i "s/sha256sums_aarch64 = .*\n/sha256sums_aarch64 = ${sha256sums_aarch64}\n/" ./.SRCINFO
          sed -i "s/sha256sums_x86_64=(\".*\")\n/sha256sums_x86_64=(\"${sha256sums_x86_64}\")\n/" ./PKGBUILD
          sed -i "s/sha256sums_aarch64=(\".*\")\n/sha256sums_aarch64=(\"${sha256sums_aarch64}\")\n/" ./PKGBUILD

      - name: Push to AUR
        id: push
        run: |
          git config --global --add user.name "${{ secrets.USER_NAME }}"
          git config --global --add user.email "${{ secrets.EMAIL }}"
          git add .
          git commit -m "Release v$version"
          git push origin master
