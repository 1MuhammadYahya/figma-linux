name: Build

on:
  create:
    tags:
    - 'v*.*.*'

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        id: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache src
        id: cache-src
        uses: actions/upload-artifact@v2
        with:
          name: src
          path: ./*

  build_arm64v8:
    needs: setup
    name: build for arm64v8
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: src
        path: ./

    - name: Setup
      run: |
        chmod +wr . -R
        chmod +x ./scripts/*.sh
        chmod +x ./scripts/*.pl

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build AppImageKit
      run: |
        cd /tmp
        git clone --single-branch --recursive https://github.com/AppImage/AppImageKit
        cd AppImageKit/
        ARCH="aarch64" bash ci/build.sh
        ls -la .
        ls -la ./out
        cp -rf ./out/appimagetool-aarch64.AppImage /bin/appimagetool

    - name: Build in Docker
      id: build
      run: |
        df -h
        docker buildx build --platform linux/arm64 -t 4tqrgqe5yrgfd/figma-linux-artefacts-arm --load -f ./Build_artefacts_arm64v8 .
        mkdir -p ./build/installers
        docker cp $(docker create 4tqrgqe5yrgfd/figma-linux-artefacts-arm)://usr/src/figma-linux/build/installers/. ./build/installers
        ./scripts/appimage.sh
        perl ./scripts/generate_release_notes.pl

    - name: Cache arm64v8 artifacts
      id: cache-arm64v8-artifacts
      uses: actions/upload-artifact@v2
      with:
        name: arm64v8
        path: build/installers/figma-linux*

  build_amd64:
    runs-on: ubuntu-latest
    name: build for amd64
    needs: setup
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: src
          path: ./

      - name: chmod
        run: |
          chmod +x ./scripts/*.sh
          chmod +x ./scripts/*.pl

      - name: Build in Docker
        id: build
        run: |
          docker build -t figma-linux-artefacts -f "./Build_artefacts_local" .
          mkdir -p ./build/installers
          docker cp $(docker create figma-linux-artefacts:latest)://usr/src/figma-linux/build/installers/. ./build/installers
          perl ./scripts/generate_release_notes.pl

      - name: Cache amd64 artifacts
        id: cache-amd64-artifacts
        uses: actions/upload-artifact@v2
        with:
          name: amd64
          path: |
            ./release_notes
            build/installers/figma-linux*
            build/installers/version

  release_amd64:
    name: Upload assets
    runs-on: ubuntu-latest
    needs: build_amd64
    steps:
      - name: mkdir installers
        run: mkdir -p ./build/installers

      - uses: actions/download-artifact@v2
        with:
          name: amd64
          path: ./

      - name: Get version
        id: version
        run: |
          echo ::set-output name=release::$(cat build/installers/version)

      - name: Upload release assets
        id: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: ./release_notes
          name: Figma Linux ${{ steps.version.outputs.release }}
          files: build/installers/figma-linux*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release_arm64v8:
    name: Upload assets
    runs-on: ubuntu-latest
    needs: build_arm64v8
    steps:
      - name: mkdir installers
        run: mkdir -p ./build/installers

      - uses: actions/download-artifact@v2
        with:
          name: arm64v8
          path: ./build/installers

      - name: ls assets
        id: ls
        run: |
          ls -la ./build/installers
          echo ::set-output name=release::$(cat build/installers/version)

      - name: Upload release assets
        id: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: build/installers/figma-linux*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
